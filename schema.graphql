enum LoanStatus {
  PENDING
  ACTIVE
  CLOSED
  LIQUIDATED
  LOAN_REPAID
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum LockStatus {
  ACTIVE
  LIQUIDATED
  UNLOCKED
}

type SupportedCollection @entity {
  " the ID is supportedcollection and collection address "
  id: ID!

  " The collection address "
  collection: collection!
}

type contract @entity {
  id: ID!
  asERC721: collection
}

type account @entity {
  " the wallet address "
  id: ID!

  " The NFTs owned by this account "
  tokens: [token!]! @derivedFrom(field: "owner")

  " The total revenue generated for this account "
  revenue: BigInt

  " The transfers originating from this account "
  transfersFrom: [transfer!] @derivedFrom(field: "senderAddress")

  " The transfers recevied by this account"
  transfersTo: [transfer!] @derivedFrom(field: "receiverAddress")

  " M:M relationship for Accounts and Collections "
  accountCollection: [accountCollection!] @derivedFrom(field: "account")

  " withdrawable bids from failed bid "
  withdrawableBid: BigInt!

  " locked nfts "
  lockedIds: [lockId!] @derivedFrom(field: "depositor")

  " contract bids "
  bids: [bid!] @derivedFrom(field: "bidder")

  " loanContract as a borrower "
  borrows: [loanContract!] @derivedFrom(field: "borrower")

  " loanContract as a lender "
  lends: [loanContract!] @derivedFrom(field: "lender")
}

type collection @entity {
  " The address of the collection "
  id: ID!

  " The name of the collection "
  name: String

  " The symbol for the collection "
  symbol: String

  " Total Supply of Tokens "
  totalSupply: BigInt

  " Mint Price "
  mintPrice: BigDecimal

  " Tokens for the collection"
  tokens: [token!]! @derivedFrom(field: "collection")

  " Collection supports metadata "
  supportsMetadata: Boolean

  " M:M relationship for Accounts and Collections "
  accountCollection: [accountCollection!]! @derivedFrom(field: "collection")
}

type token @entity {
  " eth / Collection Addrress - Token Id "
  id: ID!

  " The collection address "
  collection: collection!

  " The id of the NFT"
  identifier: BigInt!

  " The token URI "
  tokenURI: String!

  " Used to track last fetched time for token metadata "
  updatedAtTimestamp: BigInt!

  " Token ID / identifier but as a string for fullTextSearch "
  tokenId: String!

  " The address that currently owns the token "
  owner: account

  " Transfers involving this token "
  transfers: [transfer!]! @derivedFrom(field: "token")
}

type accountCollection @entity {
  " Account Id - Collection Id "
  id: ID!

  " Address of the account "
  account: account

  " Address of the NFT Collection "
  collection: collection

  " Count of NFT's owned in a collection by the Address"
  tokenCount: Int!
}

type transaction @entity {
  " the hash of the tx"
  id: ID!

  " Timestamp for block "
  timestamp: Int!

  " Block Number "
  blockNumber: Int!

  " Address who initiated the transaction "
  transactionFrom: Bytes!

  " Transfers that occured within the transaction "
  transfers: [transfer!]!

  " Gas Spent "
  gasPrice: BigInt
}

type transfer @entity {
  " Block Number and Event Id in which the transfers event occured"
  id: ID!

  " Transaction hash in which the transfer event occured"
  transaction: transaction!

  " The collection address "
  collection: collection!

  " The collection addrress - The token id "
  token: token!

  " The sender address "
  senderAddress: account

  " The receiver address "
  receiverAddress: account

  " Timestamp for block "
  timestamp: Int!

  " Block Number "
  blockNumber: Int!
}

type protocol @entity {
  " The protocol contract address "
  id: ID!

  " The protocol name "
  name: String!

  " The tokens locked by this protocol "
  lockedIds: [lockId!] @derivedFrom(field: "protocol")

  " The protocol fee "
  protocolFee: Int!

  " The security fee "
  securityFee: Int!

  " total borrows "
  totalBorrows: BigInt!

  " interest paid by borrowers "
  totalPaidInterest: BigInt!
}

type lockId @entity {
  " The lock id in bytes "
  id: ID!

  " The array of collections that are locked "
  collection: collection!

  " An array of token entity of this collection that was locked "
  tokens: [token!]!

  " The address that locked the collections "
  depositor: account!

  " The protocol that locked the collections "
  protocol: protocol!

  " The timestamp of when the lock expires "
  expires: BigInt!

  " the contract it was opened for "
  contract: loanContract

  " the lock status "
  status: LockStatus!

  " Transaction hash in which the deposit event occured"
  transaction: transaction!
}

type loanContract @entity {
  " the loanContract id in bytes"
  id: ID!

  " The borrower address "
  borrower: account!

  " The lender address "
  lender: account

  " The interest/apr to be paid "
  interest: Int!

  " The amount borrowed "
  amount: BigInt!

  " The loan expiry date. changes from days count to unix period when active "
  expiry: BigInt!

  " The start block of the loan "
  checkPointBlock: BigInt!

  " state of the loan "
  status: LoanStatus!

  " the lockId of the tokens locked for the loan "
  lockId: lockId! @derivedFrom(field: "contract")

  " Bids made to this contract "
  bids: [bid!] @derivedFrom(field: "contract")

  " Transaction hash in which the loanContractOpened event occured"
  transaction: transaction!
}

type bid @entity {
  " the loanContract id - the bidder address "
  id: ID!

  " bidder address "
  bidder: account!

  " proposed interest "
  proposedInterest: Int!

  " Contract bidding for "
  contract: loanContract!

  " Transaction hash in which the transfer event occured"
  transaction: transaction!

  " the bid status "
  status: BidStatus!
}

type _Schema_
  @fulltext(
    name: "accountSearch"
    language: en
    algorithm: rank
    include: [{ entity: "account", fields: [{ name: "id" }] }]
  )
