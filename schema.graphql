type SupportedCollection @entity {
  " the ID is supportedcollection and collection address "
  id: ID!

  " The collection address "
  collection: collection!
}

type contract @entity {
  id: ID!
  asERC721: collection
}

type account @entity {
  " the wallet address "
  id: ID!

  " The NFTs owned by this account "
  tokens: [token!]! @derivedFrom(field: "owner")

  " The total revenue generated for this account "
  revenue: BigInt

  " The transfers originating from this account "
  transfersFrom: [transfer!] @derivedFrom(field: "senderAddress")

  " The transfers recevied by this account"
  transfersTo: [transfer!] @derivedFrom(field: "receiverAddress")

  " M:M relationship for Accounts and Collections "
  accountCollection: [accountCollection!] @derivedFrom(field: "account")
}

type collection @entity {
  " The address of the collection "
  id: ID!

  " The name of the collection "
  name: String

  " The symbol for the collection "
  symbol: String

  " Total Supply of Tokens "
  totalSupply: BigInt

  " Mint Price "
  mintPrice: BigDecimal

  " Tokens for the collection"
  tokens: [token!]! @derivedFrom(field: "collection")

  " Collection supports metadata "
  supportsMetadata: Boolean

  " M:M relationship for Accounts and Collections "
  accountCollection: [accountCollection!]! @derivedFrom(field: "collection")
}

type token @entity {
  " kcc / Collection Addrress - Token Id "
  id: ID!

  " The collection address "
  collection: collection!

  " The id of the NFT"
  identifier: BigInt!

  " The token URI "
  tokenURI: String!

  " Used to track last fetched time for token metadata "
  updatedAtTimestamp: BigInt!

  " Token ID / identifier but as a string for fullTextSearch "
  tokenId: String!

  " The address that currently owns the token "
  owner: account

  " Transfers involving this token "
  transfers: [transfer!]! @derivedFrom(field: "token")
}

type accountCollection @entity {
  " Account Id - Collection Id "
  id: ID!

  " Address of the account "
  account: account

  " Address of the NFT Collection "
  collection: collection

  " Count of NFT's owned in a collection by the Address"
  tokenCount: Int!
}

type transaction @entity {
  " the hash of the tx"
  id: ID!

  " Timestamp for block "
  timestamp: Int!

  " Block Number "
  blockNumber: Int!

  " Address who initiated the transaction "
  transactionFrom: Bytes!

  " Transfers that occured within the transaction "
  transfers: [transfer!]!

  " Gas Spent "
  gasPrice: BigInt
}

type transfer @entity {
  " Block Number and Event Id in which the transfers event occured"
  id: ID!

  " Transaction hash in which the transfer event occured"
  transaction: transaction!

  " The collection address "
  collection: collection!

  " The collection addrress - The token id "
  token: token!

  " The sender address "
  senderAddress: account

  " The receiver address "
  receiverAddress: account

  " Timestamp for block "
  timestamp: Int!

  " Block Number "
  blockNumber: Int!
}

type _Schema_
  @fulltext(
    name: "accountSearch"
    language: en
    algorithm: rank
    include: [{ entity: "account", fields: [{ name: "id" }] }]
  )
